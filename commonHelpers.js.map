{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startButton = document.querySelector('button[data-start]');\nstartButton.addEventListener('click', startTimer);\n\nstartButtonEnabeld(startButton, false);\n\nlet userSelectedDate = '';\n\nflatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = new Date(selectedDates[0]);\n    const currentDate = new Date();\n    if (userSelectedDate <= currentDate) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        timeout: 2000,\n        position: 'topRight',\n        transitionIn: 'fadeInDown',\n        progressBar: false,\n      });\n      startButtonEnabeld(startButton, false);\n    } else {\n      startButtonEnabeld(startButton, true);\n    }\n  },\n});\n\nfunction startButtonEnabeld(startButton, condition = false) {\n  if (condition === false) {\n    startButton.setAttribute('disabled', 'true');\n  } else {\n    startButton.removeAttribute('disabled');\n  }\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(timeToFormat) {\n  let formattedTimer = {};\n  for (const key in timeToFormat) {\n    if (timeToFormat[key] < 10) {\n      formattedTimer[key] = timeToFormat[key].toString().padStart(2, 0);\n    } else {\n      formattedTimer[key] = timeToFormat[key].toString();\n    }\n  }\n  return formattedTimer;\n}\n\nfunction startTimer() {\n  currentDate = new Date();\n  const timeToCountdown = convertMs(\n    userSelectedDate.getTime() - currentDate.getTime()\n  );\n  const formattedTimer = addLeadingZero(timeToCountdown);\n  console.log(formattedTimer);\n}\n"],"names":["startButton","startTimer","startButtonEnabeld","userSelectedDate","flatpickr","selectedDates","iziToast","condition","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","timeToFormat","formattedTimer","key","timeToCountdown"],"mappings":"4xBAKA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EAC/DA,EAAY,iBAAiB,QAASC,CAAU,EAEhDC,EAAmBF,EAAa,EAAK,EAErC,IAAIG,EAAmB,GAEvBC,EAAU,mBAAoB,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmB,IAAI,KAAKE,EAAc,CAAC,CAAC,EAExCF,GADgB,IAAI,MAEtBG,EAAS,MAAM,CACb,QAAS,qCACT,QAAS,IACT,SAAU,WACV,aAAc,aACd,YAAa,EACrB,CAAO,EACDJ,EAAmBF,EAAa,EAAK,GAErCE,EAAmBF,EAAa,EAAI,CAEvC,CACH,CAAC,EAED,SAASE,EAAmBF,EAAaO,EAAY,GAAO,CACtDA,IAAc,GAChBP,EAAY,aAAa,WAAY,MAAM,EAE3CA,EAAY,gBAAgB,UAAU,CAE1C,CAEA,SAASQ,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAc,CACpC,IAAIC,EAAiB,CAAA,EACrB,UAAWC,KAAOF,EACZA,EAAaE,CAAG,EAAI,GACtBD,EAAeC,CAAG,EAAIF,EAAaE,CAAG,EAAE,SAAQ,EAAG,SAAS,EAAG,CAAC,EAEhED,EAAeC,CAAG,EAAIF,EAAaE,CAAG,EAAE,SAAQ,EAGpD,OAAOD,CACT,CAEA,SAASf,GAAa,CACpB,YAAc,IAAI,KAClB,MAAMiB,EAAkBV,EACtBL,EAAiB,QAAO,EAAK,YAAY,QAAS,CACtD,EACQa,EAAiBF,EAAeI,CAAe,EACrD,QAAQ,IAAIF,CAAc,CAC5B"}